# hyperparameters : 
#   LogisticRegression:
#     C: [0.01, 0.1, 1, 10]
#     penalty: ["l2"]
#     solver: ["liblinear", "lbfgs"]
#     max_iter: [100, 200]
#     random_state: [13]
#   GaussianNB:
#     var_smoothing: [1e-9, 1e-8, 1e-7, 1e-6]
#   RandomForestClassifier:
#     n_estimators: [100, 200, 300]
#     max_depth: [5, 10, 20]
#     max_features: [0.5, 0.7, 1]
#     random_state: [13]
#   GradientBoostingClassifier:
#     n_estimators: [100, 200, 300]
#     max_depth: [5, 10, 20]
#     max_features: [0.5, 0.7, 1]
#     random_state: [13]
  
#FOR OPTUNA
  hyperparameters:
    LogisticRegression:
      C:
        type: float
        low: 0.01
        high: 10.0
        log: true  # optional, use log scale for sampling
      penalty:
        type: categorical
        values: ["l2"]
      solver:
        type: categorical
        values: ["liblinear", "lbfgs"]
      max_iter:
        type: int
        low: 100
        high: 200
      random_state:
        type: int
        low: 13
        high: 13
    GaussianNB:
      var_smoothing:
        type: float
        low: 1e-9
        high: 1e-6
        log: true
    RandomForestClassifier:
      n_estimators:
        type: int
        low: 100
        high: 300
      max_depth:
        type: int
        low: 5
        high: 20
      max_features:
        type: float
        low: 0.5
        high: 1.0
      random_state:
        type: int
        low: 13
        high: 13
    GradientBoostingClassifier:
      n_estimators:
        type: int
        low: 100
        high: 300
      max_depth:
        type: int
        low: 5
        high: 20
      max_features:
        type: float
        low: 0.5
        high: 1.0
      random_state:
        type: int
        low: 13
        high: 13
